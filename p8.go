/*
Problem 8 - Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/
package main

import "fmt"

func main() {
	biggest:=0
	// Store the number as a string for easy iteration.
	big:="73167176531330624919225119674426574742355349194934969835203127745063262395783180169848018694788518438586156078911294949545950173783319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
	for i:=0; i < 986; i++ {
		product := 1
		for j:=i; j < i+13; j++ {
			// Go doesn't really seem to have normal char support and Atoi is finicky, so subtract 48 from the ASCII value.
			// This check doesn't really make a difference here, but could if we want to check more digits.
			if big[j] == 48 { 	// If the current char is 0
				i += j - i		// Skip past this number since it's obviously too small
				break
			}
			product = product * int(big[j] - 48)
		}
		if product > biggest {
			biggest = product
		}
	}
	fmt.Println(biggest)
}